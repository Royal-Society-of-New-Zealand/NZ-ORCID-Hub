# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Source(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, source_orcid=None, source_client_id=None, source_name=None):
        """
        Source - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'source_orcid': 'SourceOrcid',
            'source_client_id': 'SourceClientId',
            'source_name': 'SourceName'
        }

        self.attribute_map = {
            'source_orcid': 'source-orcid',
            'source_client_id': 'source-client-id',
            'source_name': 'source-name'
        }

        self._source_orcid = source_orcid
        self._source_client_id = source_client_id
        self._source_name = source_name

    @property
    def source_orcid(self):
        """
        Gets the source_orcid of this Source.

        :return: The source_orcid of this Source.
        :rtype: SourceOrcid
        """
        return self._source_orcid

    @source_orcid.setter
    def source_orcid(self, source_orcid):
        """
        Sets the source_orcid of this Source.

        :param source_orcid: The source_orcid of this Source.
        :type: SourceOrcid
        """

        self._source_orcid = source_orcid

    @property
    def source_client_id(self):
        """
        Gets the source_client_id of this Source.

        :return: The source_client_id of this Source.
        :rtype: SourceClientId
        """
        return self._source_client_id

    @source_client_id.setter
    def source_client_id(self, source_client_id):
        """
        Sets the source_client_id of this Source.

        :param source_client_id: The source_client_id of this Source.
        :type: SourceClientId
        """

        self._source_client_id = source_client_id

    @property
    def source_name(self):
        """
        Gets the source_name of this Source.

        :return: The source_name of this Source.
        :rtype: SourceName
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """
        Sets the source_name of this Source.

        :param source_name: The source_name of this Source.
        :type: SourceName
        """

        self._source_name = source_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Source):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
