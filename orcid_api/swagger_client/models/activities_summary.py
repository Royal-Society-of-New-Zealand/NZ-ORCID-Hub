# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ActivitiesSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_modified_date=None, educations=None, employments=None, fundings=None, peer_reviews=None, works=None, path=None):
        """
        ActivitiesSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_modified_date': 'LastModifiedDate',
            'educations': 'Educations',
            'employments': 'Employments',
            'fundings': 'Fundings',
            'peer_reviews': 'PeerReviews',
            'works': 'Works',
            'path': 'str'
        }

        self.attribute_map = {
            'last_modified_date': 'last-modified-date',
            'educations': 'educations',
            'employments': 'employments',
            'fundings': 'fundings',
            'peer_reviews': 'peer-reviews',
            'works': 'works',
            'path': 'path'
        }

        self._last_modified_date = last_modified_date
        self._educations = educations
        self._employments = employments
        self._fundings = fundings
        self._peer_reviews = peer_reviews
        self._works = works
        self._path = path

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this ActivitiesSummary.

        :return: The last_modified_date of this ActivitiesSummary.
        :rtype: LastModifiedDate
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this ActivitiesSummary.

        :param last_modified_date: The last_modified_date of this ActivitiesSummary.
        :type: LastModifiedDate
        """

        self._last_modified_date = last_modified_date

    @property
    def educations(self):
        """
        Gets the educations of this ActivitiesSummary.

        :return: The educations of this ActivitiesSummary.
        :rtype: Educations
        """
        return self._educations

    @educations.setter
    def educations(self, educations):
        """
        Sets the educations of this ActivitiesSummary.

        :param educations: The educations of this ActivitiesSummary.
        :type: Educations
        """

        self._educations = educations

    @property
    def employments(self):
        """
        Gets the employments of this ActivitiesSummary.

        :return: The employments of this ActivitiesSummary.
        :rtype: Employments
        """
        return self._employments

    @employments.setter
    def employments(self, employments):
        """
        Sets the employments of this ActivitiesSummary.

        :param employments: The employments of this ActivitiesSummary.
        :type: Employments
        """

        self._employments = employments

    @property
    def fundings(self):
        """
        Gets the fundings of this ActivitiesSummary.

        :return: The fundings of this ActivitiesSummary.
        :rtype: Fundings
        """
        return self._fundings

    @fundings.setter
    def fundings(self, fundings):
        """
        Sets the fundings of this ActivitiesSummary.

        :param fundings: The fundings of this ActivitiesSummary.
        :type: Fundings
        """

        self._fundings = fundings

    @property
    def peer_reviews(self):
        """
        Gets the peer_reviews of this ActivitiesSummary.

        :return: The peer_reviews of this ActivitiesSummary.
        :rtype: PeerReviews
        """
        return self._peer_reviews

    @peer_reviews.setter
    def peer_reviews(self, peer_reviews):
        """
        Sets the peer_reviews of this ActivitiesSummary.

        :param peer_reviews: The peer_reviews of this ActivitiesSummary.
        :type: PeerReviews
        """

        self._peer_reviews = peer_reviews

    @property
    def works(self):
        """
        Gets the works of this ActivitiesSummary.

        :return: The works of this ActivitiesSummary.
        :rtype: Works
        """
        return self._works

    @works.setter
    def works(self, works):
        """
        Sets the works of this ActivitiesSummary.

        :param works: The works of this ActivitiesSummary.
        :type: Works
        """

        self._works = works

    @property
    def path(self):
        """
        Gets the path of this ActivitiesSummary.

        :return: The path of this ActivitiesSummary.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ActivitiesSummary.

        :param path: The path of this ActivitiesSummary.
        :type: str
        """

        self._path = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ActivitiesSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
