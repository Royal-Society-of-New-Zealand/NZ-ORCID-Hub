# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_modified_date=None, external_ids=None, work_summary=None):
        """
        WorkGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_modified_date': 'LastModifiedDate',
            'external_ids': 'ExternalIDs',
            'work_summary': 'list[WorkSummary]'
        }

        self.attribute_map = {
            'last_modified_date': 'last-modified-date',
            'external_ids': 'external-ids',
            'work_summary': 'work-summary'
        }

        self._last_modified_date = last_modified_date
        self._external_ids = external_ids
        self._work_summary = work_summary

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this WorkGroup.

        :return: The last_modified_date of this WorkGroup.
        :rtype: LastModifiedDate
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this WorkGroup.

        :param last_modified_date: The last_modified_date of this WorkGroup.
        :type: LastModifiedDate
        """

        self._last_modified_date = last_modified_date

    @property
    def external_ids(self):
        """
        Gets the external_ids of this WorkGroup.

        :return: The external_ids of this WorkGroup.
        :rtype: ExternalIDs
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """
        Sets the external_ids of this WorkGroup.

        :param external_ids: The external_ids of this WorkGroup.
        :type: ExternalIDs
        """

        self._external_ids = external_ids

    @property
    def work_summary(self):
        """
        Gets the work_summary of this WorkGroup.

        :return: The work_summary of this WorkGroup.
        :rtype: list[WorkSummary]
        """
        return self._work_summary

    @work_summary.setter
    def work_summary(self, work_summary):
        """
        Sets the work_summary of this WorkGroup.

        :param work_summary: The work_summary of this WorkGroup.
        :type: list[WorkSummary]
        """

        self._work_summary = work_summary

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
