# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PersonExternalIdentifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_date=None, last_modified_date=None, source=None, external_id_type=None, external_id_value=None, external_id_url=None, external_id_relationship=None, visibility=None, path=None, put_code=None, display_index=None):
        """
        PersonExternalIdentifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_date': 'CreatedDate',
            'last_modified_date': 'LastModifiedDate',
            'source': 'Source',
            'external_id_type': 'str',
            'external_id_value': 'str',
            'external_id_url': 'Url',
            'external_id_relationship': 'str',
            'visibility': 'str',
            'path': 'str',
            'put_code': 'int',
            'display_index': 'int'
        }

        self.attribute_map = {
            'created_date': 'created-date',
            'last_modified_date': 'last-modified-date',
            'source': 'source',
            'external_id_type': 'external-id-type',
            'external_id_value': 'external-id-value',
            'external_id_url': 'external-id-url',
            'external_id_relationship': 'external-id-relationship',
            'visibility': 'visibility',
            'path': 'path',
            'put_code': 'put-code',
            'display_index': 'display-index'
        }

        self._created_date = created_date
        self._last_modified_date = last_modified_date
        self._source = source
        self._external_id_type = external_id_type
        self._external_id_value = external_id_value
        self._external_id_url = external_id_url
        self._external_id_relationship = external_id_relationship
        self._visibility = visibility
        self._path = path
        self._put_code = put_code
        self._display_index = display_index

    @property
    def created_date(self):
        """
        Gets the created_date of this PersonExternalIdentifier.

        :return: The created_date of this PersonExternalIdentifier.
        :rtype: CreatedDate
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this PersonExternalIdentifier.

        :param created_date: The created_date of this PersonExternalIdentifier.
        :type: CreatedDate
        """

        self._created_date = created_date

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this PersonExternalIdentifier.

        :return: The last_modified_date of this PersonExternalIdentifier.
        :rtype: LastModifiedDate
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this PersonExternalIdentifier.

        :param last_modified_date: The last_modified_date of this PersonExternalIdentifier.
        :type: LastModifiedDate
        """

        self._last_modified_date = last_modified_date

    @property
    def source(self):
        """
        Gets the source of this PersonExternalIdentifier.

        :return: The source of this PersonExternalIdentifier.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this PersonExternalIdentifier.

        :param source: The source of this PersonExternalIdentifier.
        :type: Source
        """

        self._source = source

    @property
    def external_id_type(self):
        """
        Gets the external_id_type of this PersonExternalIdentifier.

        :return: The external_id_type of this PersonExternalIdentifier.
        :rtype: str
        """
        return self._external_id_type

    @external_id_type.setter
    def external_id_type(self, external_id_type):
        """
        Sets the external_id_type of this PersonExternalIdentifier.

        :param external_id_type: The external_id_type of this PersonExternalIdentifier.
        :type: str
        """
        if external_id_type is None:
            raise ValueError("Invalid value for `external_id_type`, must not be `None`")

        self._external_id_type = external_id_type

    @property
    def external_id_value(self):
        """
        Gets the external_id_value of this PersonExternalIdentifier.

        :return: The external_id_value of this PersonExternalIdentifier.
        :rtype: str
        """
        return self._external_id_value

    @external_id_value.setter
    def external_id_value(self, external_id_value):
        """
        Sets the external_id_value of this PersonExternalIdentifier.

        :param external_id_value: The external_id_value of this PersonExternalIdentifier.
        :type: str
        """
        if external_id_value is None:
            raise ValueError("Invalid value for `external_id_value`, must not be `None`")

        self._external_id_value = external_id_value

    @property
    def external_id_url(self):
        """
        Gets the external_id_url of this PersonExternalIdentifier.

        :return: The external_id_url of this PersonExternalIdentifier.
        :rtype: Url
        """
        return self._external_id_url

    @external_id_url.setter
    def external_id_url(self, external_id_url):
        """
        Sets the external_id_url of this PersonExternalIdentifier.

        :param external_id_url: The external_id_url of this PersonExternalIdentifier.
        :type: Url
        """

        self._external_id_url = external_id_url

    @property
    def external_id_relationship(self):
        """
        Gets the external_id_relationship of this PersonExternalIdentifier.

        :return: The external_id_relationship of this PersonExternalIdentifier.
        :rtype: str
        """
        return self._external_id_relationship

    @external_id_relationship.setter
    def external_id_relationship(self, external_id_relationship):
        """
        Sets the external_id_relationship of this PersonExternalIdentifier.

        :param external_id_relationship: The external_id_relationship of this PersonExternalIdentifier.
        :type: str
        """
        allowed_values = ["PART_OF", "SELF"]
        if external_id_relationship not in allowed_values:
            raise ValueError(
                "Invalid value for `external_id_relationship` ({0}), must be one of {1}"
                .format(external_id_relationship, allowed_values)
            )

        self._external_id_relationship = external_id_relationship

    @property
    def visibility(self):
        """
        Gets the visibility of this PersonExternalIdentifier.

        :return: The visibility of this PersonExternalIdentifier.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this PersonExternalIdentifier.

        :param visibility: The visibility of this PersonExternalIdentifier.
        :type: str
        """
        allowed_values = ["LIMITED", "REGISTERED_ONLY", "PUBLIC", "PRIVATE"]
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def path(self):
        """
        Gets the path of this PersonExternalIdentifier.

        :return: The path of this PersonExternalIdentifier.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this PersonExternalIdentifier.

        :param path: The path of this PersonExternalIdentifier.
        :type: str
        """

        self._path = path

    @property
    def put_code(self):
        """
        Gets the put_code of this PersonExternalIdentifier.

        :return: The put_code of this PersonExternalIdentifier.
        :rtype: int
        """
        return self._put_code

    @put_code.setter
    def put_code(self, put_code):
        """
        Sets the put_code of this PersonExternalIdentifier.

        :param put_code: The put_code of this PersonExternalIdentifier.
        :type: int
        """

        self._put_code = put_code

    @property
    def display_index(self):
        """
        Gets the display_index of this PersonExternalIdentifier.

        :return: The display_index of this PersonExternalIdentifier.
        :rtype: int
        """
        return self._display_index

    @display_index.setter
    def display_index(self, display_index):
        """
        Sets the display_index of this PersonExternalIdentifier.

        :param display_index: The display_index of this PersonExternalIdentifier.
        :type: int
        """

        self._display_index = display_index

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PersonExternalIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
