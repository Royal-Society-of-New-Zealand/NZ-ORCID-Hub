# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from orcid_api_v3.models.activities_summary_v30_rc1 import ActivitiesSummaryV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.history_v30_rc1 import HistoryV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.orcid_identifier_v30_rc1 import OrcidIdentifierV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.person_v30_rc1 import PersonV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.preferences_v30_rc1 import PreferencesV30Rc1  # noqa: F401,E501


class RecordV30Rc1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orcid_identifier': 'OrcidIdentifierV30Rc1',
        'preferences': 'PreferencesV30Rc1',
        'history': 'HistoryV30Rc1',
        'person': 'PersonV30Rc1',
        'activities_summary': 'ActivitiesSummaryV30Rc1',
        'path': 'str'
    }

    attribute_map = {
        'orcid_identifier': 'orcid-identifier',
        'preferences': 'preferences',
        'history': 'history',
        'person': 'person',
        'activities_summary': 'activities-summary',
        'path': 'path'
    }

    def __init__(self, orcid_identifier=None, preferences=None, history=None, person=None, activities_summary=None, path=None):  # noqa: E501
        """RecordV30Rc1 - a model defined in Swagger"""  # noqa: E501
        self._orcid_identifier = None
        self._preferences = None
        self._history = None
        self._person = None
        self._activities_summary = None
        self._path = None
        self.discriminator = None
        if orcid_identifier is not None:
            self.orcid_identifier = orcid_identifier
        if preferences is not None:
            self.preferences = preferences
        if history is not None:
            self.history = history
        if person is not None:
            self.person = person
        if activities_summary is not None:
            self.activities_summary = activities_summary
        if path is not None:
            self.path = path

    @property
    def orcid_identifier(self):
        """Gets the orcid_identifier of this RecordV30Rc1.  # noqa: E501


        :return: The orcid_identifier of this RecordV30Rc1.  # noqa: E501
        :rtype: OrcidIdentifierV30Rc1
        """
        return self._orcid_identifier

    @orcid_identifier.setter
    def orcid_identifier(self, orcid_identifier):
        """Sets the orcid_identifier of this RecordV30Rc1.


        :param orcid_identifier: The orcid_identifier of this RecordV30Rc1.  # noqa: E501
        :type: OrcidIdentifierV30Rc1
        """

        self._orcid_identifier = orcid_identifier

    @property
    def preferences(self):
        """Gets the preferences of this RecordV30Rc1.  # noqa: E501


        :return: The preferences of this RecordV30Rc1.  # noqa: E501
        :rtype: PreferencesV30Rc1
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this RecordV30Rc1.


        :param preferences: The preferences of this RecordV30Rc1.  # noqa: E501
        :type: PreferencesV30Rc1
        """

        self._preferences = preferences

    @property
    def history(self):
        """Gets the history of this RecordV30Rc1.  # noqa: E501


        :return: The history of this RecordV30Rc1.  # noqa: E501
        :rtype: HistoryV30Rc1
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this RecordV30Rc1.


        :param history: The history of this RecordV30Rc1.  # noqa: E501
        :type: HistoryV30Rc1
        """

        self._history = history

    @property
    def person(self):
        """Gets the person of this RecordV30Rc1.  # noqa: E501


        :return: The person of this RecordV30Rc1.  # noqa: E501
        :rtype: PersonV30Rc1
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this RecordV30Rc1.


        :param person: The person of this RecordV30Rc1.  # noqa: E501
        :type: PersonV30Rc1
        """

        self._person = person

    @property
    def activities_summary(self):
        """Gets the activities_summary of this RecordV30Rc1.  # noqa: E501


        :return: The activities_summary of this RecordV30Rc1.  # noqa: E501
        :rtype: ActivitiesSummaryV30Rc1
        """
        return self._activities_summary

    @activities_summary.setter
    def activities_summary(self, activities_summary):
        """Sets the activities_summary of this RecordV30Rc1.


        :param activities_summary: The activities_summary of this RecordV30Rc1.  # noqa: E501
        :type: ActivitiesSummaryV30Rc1
        """

        self._activities_summary = activities_summary

    @property
    def path(self):
        """Gets the path of this RecordV30Rc1.  # noqa: E501


        :return: The path of this RecordV30Rc1.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RecordV30Rc1.


        :param path: The path of this RecordV30Rc1.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordV30Rc1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordV30Rc1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
