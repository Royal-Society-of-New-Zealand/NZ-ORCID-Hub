# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from orcid_api_v3.models.day_v30_rc1 import DayV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.month_v30_rc1 import MonthV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.year_v30_rc1 import YearV30Rc1  # noqa: F401,E501


class PublicationDateV30Rc1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'YearV30Rc1',
        'month': 'MonthV30Rc1',
        'day': 'DayV30Rc1',
        'media_type': 'str'
    }

    attribute_map = {
        'year': 'year',
        'month': 'month',
        'day': 'day',
        'media_type': 'media-type'
    }

    def __init__(self, year=None, month=None, day=None, media_type=None):  # noqa: E501
        """PublicationDateV30Rc1 - a model defined in Swagger"""  # noqa: E501
        self._year = None
        self._month = None
        self._day = None
        self._media_type = None
        self.discriminator = None
        self.year = year
        if month is not None:
            self.month = month
        if day is not None:
            self.day = day
        if media_type is not None:
            self.media_type = media_type

    @property
    def year(self):
        """Gets the year of this PublicationDateV30Rc1.  # noqa: E501


        :return: The year of this PublicationDateV30Rc1.  # noqa: E501
        :rtype: YearV30Rc1
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PublicationDateV30Rc1.


        :param year: The year of this PublicationDateV30Rc1.  # noqa: E501
        :type: YearV30Rc1
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def month(self):
        """Gets the month of this PublicationDateV30Rc1.  # noqa: E501


        :return: The month of this PublicationDateV30Rc1.  # noqa: E501
        :rtype: MonthV30Rc1
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this PublicationDateV30Rc1.


        :param month: The month of this PublicationDateV30Rc1.  # noqa: E501
        :type: MonthV30Rc1
        """

        self._month = month

    @property
    def day(self):
        """Gets the day of this PublicationDateV30Rc1.  # noqa: E501


        :return: The day of this PublicationDateV30Rc1.  # noqa: E501
        :rtype: DayV30Rc1
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this PublicationDateV30Rc1.


        :param day: The day of this PublicationDateV30Rc1.  # noqa: E501
        :type: DayV30Rc1
        """

        self._day = day

    @property
    def media_type(self):
        """Gets the media_type of this PublicationDateV30Rc1.  # noqa: E501


        :return: The media_type of this PublicationDateV30Rc1.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this PublicationDateV30Rc1.


        :param media_type: The media_type of this PublicationDateV30Rc1.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRINT", "ONLINE", "OTHER"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"  # noqa: E501
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicationDateV30Rc1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicationDateV30Rc1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
