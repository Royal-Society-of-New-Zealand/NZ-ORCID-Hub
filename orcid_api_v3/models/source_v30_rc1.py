# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from orcid_api_v3.models.source_client_id_v30_rc1 import SourceClientIdV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.source_name_v30_rc1 import SourceNameV30Rc1  # noqa: F401,E501
from orcid_api_v3.models.source_orcid_v30_rc1 import SourceOrcidV30Rc1  # noqa: F401,E501


class SourceV30Rc1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_orcid': 'SourceOrcidV30Rc1',
        'source_client_id': 'SourceClientIdV30Rc1',
        'source_name': 'SourceNameV30Rc1'
    }

    attribute_map = {
        'source_orcid': 'source-orcid',
        'source_client_id': 'source-client-id',
        'source_name': 'source-name'
    }

    def __init__(self, source_orcid=None, source_client_id=None, source_name=None):  # noqa: E501
        """SourceV30Rc1 - a model defined in Swagger"""  # noqa: E501
        self._source_orcid = None
        self._source_client_id = None
        self._source_name = None
        self.discriminator = None
        if source_orcid is not None:
            self.source_orcid = source_orcid
        if source_client_id is not None:
            self.source_client_id = source_client_id
        if source_name is not None:
            self.source_name = source_name

    @property
    def source_orcid(self):
        """Gets the source_orcid of this SourceV30Rc1.  # noqa: E501


        :return: The source_orcid of this SourceV30Rc1.  # noqa: E501
        :rtype: SourceOrcidV30Rc1
        """
        return self._source_orcid

    @source_orcid.setter
    def source_orcid(self, source_orcid):
        """Sets the source_orcid of this SourceV30Rc1.


        :param source_orcid: The source_orcid of this SourceV30Rc1.  # noqa: E501
        :type: SourceOrcidV30Rc1
        """

        self._source_orcid = source_orcid

    @property
    def source_client_id(self):
        """Gets the source_client_id of this SourceV30Rc1.  # noqa: E501


        :return: The source_client_id of this SourceV30Rc1.  # noqa: E501
        :rtype: SourceClientIdV30Rc1
        """
        return self._source_client_id

    @source_client_id.setter
    def source_client_id(self, source_client_id):
        """Sets the source_client_id of this SourceV30Rc1.


        :param source_client_id: The source_client_id of this SourceV30Rc1.  # noqa: E501
        :type: SourceClientIdV30Rc1
        """

        self._source_client_id = source_client_id

    @property
    def source_name(self):
        """Gets the source_name of this SourceV30Rc1.  # noqa: E501


        :return: The source_name of this SourceV30Rc1.  # noqa: E501
        :rtype: SourceNameV30Rc1
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this SourceV30Rc1.


        :param source_name: The source_name of this SourceV30Rc1.  # noqa: E501
        :type: SourceNameV30Rc1
        """

        self._source_name = source_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceV30Rc1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceV30Rc1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
