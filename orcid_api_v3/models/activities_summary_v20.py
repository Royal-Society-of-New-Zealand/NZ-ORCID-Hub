# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from orcid_api_v3.models.educations_summary_v20 import EducationsSummaryV20  # noqa: F401,E501
from orcid_api_v3.models.employments_summary_v20 import EmploymentsSummaryV20  # noqa: F401,E501
from orcid_api_v3.models.fundings_v20 import FundingsV20  # noqa: F401,E501
from orcid_api_v3.models.last_modified_date_v20 import LastModifiedDateV20  # noqa: F401,E501
from orcid_api_v3.models.peer_reviews_v20 import PeerReviewsV20  # noqa: F401,E501
from orcid_api_v3.models.works_summary_v20 import WorksSummaryV20  # noqa: F401,E501


class ActivitiesSummaryV20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_modified_date': 'LastModifiedDateV20',
        'educations': 'EducationsSummaryV20',
        'employments': 'EmploymentsSummaryV20',
        'fundings': 'FundingsV20',
        'peer_reviews': 'PeerReviewsV20',
        'works': 'WorksSummaryV20',
        'path': 'str'
    }

    attribute_map = {
        'last_modified_date': 'last-modified-date',
        'educations': 'educations',
        'employments': 'employments',
        'fundings': 'fundings',
        'peer_reviews': 'peer-reviews',
        'works': 'works',
        'path': 'path'
    }

    def __init__(self, last_modified_date=None, educations=None, employments=None, fundings=None, peer_reviews=None, works=None, path=None):  # noqa: E501
        """ActivitiesSummaryV20 - a model defined in Swagger"""  # noqa: E501
        self._last_modified_date = None
        self._educations = None
        self._employments = None
        self._fundings = None
        self._peer_reviews = None
        self._works = None
        self._path = None
        self.discriminator = None
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if educations is not None:
            self.educations = educations
        if employments is not None:
            self.employments = employments
        if fundings is not None:
            self.fundings = fundings
        if peer_reviews is not None:
            self.peer_reviews = peer_reviews
        if works is not None:
            self.works = works
        if path is not None:
            self.path = path

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ActivitiesSummaryV20.  # noqa: E501


        :return: The last_modified_date of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: LastModifiedDateV20
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ActivitiesSummaryV20.


        :param last_modified_date: The last_modified_date of this ActivitiesSummaryV20.  # noqa: E501
        :type: LastModifiedDateV20
        """

        self._last_modified_date = last_modified_date

    @property
    def educations(self):
        """Gets the educations of this ActivitiesSummaryV20.  # noqa: E501


        :return: The educations of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: EducationsSummaryV20
        """
        return self._educations

    @educations.setter
    def educations(self, educations):
        """Sets the educations of this ActivitiesSummaryV20.


        :param educations: The educations of this ActivitiesSummaryV20.  # noqa: E501
        :type: EducationsSummaryV20
        """

        self._educations = educations

    @property
    def employments(self):
        """Gets the employments of this ActivitiesSummaryV20.  # noqa: E501


        :return: The employments of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: EmploymentsSummaryV20
        """
        return self._employments

    @employments.setter
    def employments(self, employments):
        """Sets the employments of this ActivitiesSummaryV20.


        :param employments: The employments of this ActivitiesSummaryV20.  # noqa: E501
        :type: EmploymentsSummaryV20
        """

        self._employments = employments

    @property
    def fundings(self):
        """Gets the fundings of this ActivitiesSummaryV20.  # noqa: E501


        :return: The fundings of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: FundingsV20
        """
        return self._fundings

    @fundings.setter
    def fundings(self, fundings):
        """Sets the fundings of this ActivitiesSummaryV20.


        :param fundings: The fundings of this ActivitiesSummaryV20.  # noqa: E501
        :type: FundingsV20
        """

        self._fundings = fundings

    @property
    def peer_reviews(self):
        """Gets the peer_reviews of this ActivitiesSummaryV20.  # noqa: E501


        :return: The peer_reviews of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: PeerReviewsV20
        """
        return self._peer_reviews

    @peer_reviews.setter
    def peer_reviews(self, peer_reviews):
        """Sets the peer_reviews of this ActivitiesSummaryV20.


        :param peer_reviews: The peer_reviews of this ActivitiesSummaryV20.  # noqa: E501
        :type: PeerReviewsV20
        """

        self._peer_reviews = peer_reviews

    @property
    def works(self):
        """Gets the works of this ActivitiesSummaryV20.  # noqa: E501


        :return: The works of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: WorksSummaryV20
        """
        return self._works

    @works.setter
    def works(self, works):
        """Sets the works of this ActivitiesSummaryV20.


        :param works: The works of this ActivitiesSummaryV20.  # noqa: E501
        :type: WorksSummaryV20
        """

        self._works = works

    @property
    def path(self):
        """Gets the path of this ActivitiesSummaryV20.  # noqa: E501


        :return: The path of this ActivitiesSummaryV20.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ActivitiesSummaryV20.


        :param path: The path of this ActivitiesSummaryV20.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivitiesSummaryV20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitiesSummaryV20):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
