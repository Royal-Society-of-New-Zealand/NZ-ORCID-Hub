# coding: utf-8

"""
    ORCID Member

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from orcid_api_v3.models.external_i_ds_v30 import ExternalIDsV30  # noqa: F401,E501
from orcid_api_v3.models.research_resource_hosts_v30 import ResearchResourceHostsV30  # noqa: F401,E501
from orcid_api_v3.models.url_v30 import UrlV30  # noqa: F401,E501


class ResearchResourceItemV30(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_name': 'str',
        'resource_type': 'str',
        'hosts': 'ResearchResourceHostsV30',
        'external_ids': 'ExternalIDsV30',
        'url': 'UrlV30'
    }

    attribute_map = {
        'resource_name': 'resource-name',
        'resource_type': 'resource-type',
        'hosts': 'hosts',
        'external_ids': 'external-ids',
        'url': 'url'
    }

    def __init__(self, resource_name=None, resource_type=None, hosts=None, external_ids=None, url=None):  # noqa: E501
        """ResearchResourceItemV30 - a model defined in Swagger"""  # noqa: E501
        self._resource_name = None
        self._resource_type = None
        self._hosts = None
        self._external_ids = None
        self._url = None
        self.discriminator = None
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if hosts is not None:
            self.hosts = hosts
        if external_ids is not None:
            self.external_ids = external_ids
        if url is not None:
            self.url = url

    @property
    def resource_name(self):
        """Gets the resource_name of this ResearchResourceItemV30.  # noqa: E501


        :return: The resource_name of this ResearchResourceItemV30.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResearchResourceItemV30.


        :param resource_name: The resource_name of this ResearchResourceItemV30.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResearchResourceItemV30.  # noqa: E501


        :return: The resource_type of this ResearchResourceItemV30.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResearchResourceItemV30.


        :param resource_type: The resource_type of this ResearchResourceItemV30.  # noqa: E501
        :type: str
        """
        allowed_values = ["infrastructures", "collections", "equipment", "services"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def hosts(self):
        """Gets the hosts of this ResearchResourceItemV30.  # noqa: E501


        :return: The hosts of this ResearchResourceItemV30.  # noqa: E501
        :rtype: ResearchResourceHostsV30
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this ResearchResourceItemV30.


        :param hosts: The hosts of this ResearchResourceItemV30.  # noqa: E501
        :type: ResearchResourceHostsV30
        """

        self._hosts = hosts

    @property
    def external_ids(self):
        """Gets the external_ids of this ResearchResourceItemV30.  # noqa: E501


        :return: The external_ids of this ResearchResourceItemV30.  # noqa: E501
        :rtype: ExternalIDsV30
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this ResearchResourceItemV30.


        :param external_ids: The external_ids of this ResearchResourceItemV30.  # noqa: E501
        :type: ExternalIDsV30
        """

        self._external_ids = external_ids

    @property
    def url(self):
        """Gets the url of this ResearchResourceItemV30.  # noqa: E501


        :return: The url of this ResearchResourceItemV30.  # noqa: E501
        :rtype: UrlV30
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ResearchResourceItemV30.


        :param url: The url of this ResearchResourceItemV30.  # noqa: E501
        :type: UrlV30
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResearchResourceItemV30, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResearchResourceItemV30):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
